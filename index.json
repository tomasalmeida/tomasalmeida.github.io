[{"content":"In 2019, I gave a talk at Netcentric Summit about Junit5 migration and its advantages. You can check the content here:\n Video: Netcentric | JUnit 5, mockito 2 and AEM Mocks, is it true for you? Blog post: JUnit 5: leveraging new features for testing  After 3 years, I wanted to revisit the procedure to migrate from junit4 to junit5, so let\u0026rsquo;s do it! The result was this PR.\nSteps 1. Dependencies 1.2 Main pom.xml In the main pom.xml, replace\n\u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.xx\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; by (check the latest version in https://mvnrepository.com/artifact/org.junit/junit-bom)\n\u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; ... \u0026lt;!-- Junit bill of materials --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-bom\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.8.2\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; 1.2 Module pom.xml In the pom.xml of each module, replace\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; by\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.jupiter\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-jupiter-api\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- temporarily needed until the tests migration --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; 2. Code Migration I use Intellij to migrate the code.\n Go to Refactor \u0026gt; Migrate packages and classes \u0026gt; Junit (4.x -\u0026gt; 5.x) Try to compile your code to see if all import were correctly replaced If it compiles ok, you have the basic migration done. In most of the cases we need to rewrite some tests.  3. Upgrading the tests 3.1 @Test(expected=\u0026hellip;) Junit 5 has a more elegant way of testing expected exceptions. If you have\n@Test(expected=IllegalArgumentException.class) public void testIfExceptionIsThrown() throws Exception { prepareMethod(); methodCall(); } you need to migrate to\n@Test void testIfExceptionIsThrown() { prepareMethod(); assertThrows(IllegalArgumentException.class, () -\u0026gt; methodCall()); } 3.2 @RunWith(MockitoJUnitRunner.class) If you have\n@RunWith(MockitoJUnitRunner.class) public class MyClassTest { you need to migrate to the ExtendWith and add a new dependency of Mockito.\nCheck the latest version at https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter.\nNew dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mockito\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mockito-junit-jupiter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.6.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; And then the new ExtendWith:\n@ExtendWith(MockitoExtension.class) public class MyClassTest { 3.3 Replace imports Sometimes the migration fails to replace all imports. Do it manually\n   Old import New import     import static org.mockito.Matchers.any; import static org.mockito.ArgumentMatchers.any;   import static org.junit.Assert. import static org.junit.jupiter.api.Assertions.    3.4 Unnecessary stubbings detected. New Mockito versions are more strict about unnecessary stubbing and they want you to use strict stubbing. If you do not want to touch your tests yet to make them more strict, you will need to add another annotation to your class or add lenient to your mock.\nClass configuration Add @MockitoSettings(strictness = Strictness.LENIENT)\n@ExtendWith(MockitoExtension.class) @MockitoSettings(strictness = Strictness.LENIENT) public class MyClassTest { Test configuration Add lenient() in front of each failed stubbing:\nlenient().when(mock.getName()).thenReturn(name); 3.5 Parametrized tests In Junit5 the parametrized tests were redesigned. Take a look on Parameterized Tests section.\nReferences  Migrating from JUnit 4 to JUnit 5 | The IntelliJ IDEA Blog Mockito and JUnit 5 - Using ExtendWith | Baeldung   If you found any error or want to help me to improve this article, please comment the pull request.\n","permalink":"https://tomasalmeida.pro/posts/2022/06/migrating-from-junit4-to-junit5/","summary":"In 2019, I gave a talk at Netcentric Summit about Junit5 migration and its advantages. You can check the content here:\n Video: Netcentric | JUnit 5, mockito 2 and AEM Mocks, is it true for you? Blog post: JUnit 5: leveraging new features for testing  After 3 years, I wanted to revisit the procedure to migrate from junit4 to junit5, so let\u0026rsquo;s do it! The result was this PR.","title":"Migrating From Junit4 to Junit5"},{"content":"I was doubting about writing this post because AWS is evolving really fast and this post will be probably old very fast. So, I am adding the AWS documentation, so, please take your time to check the official documentation to confirm my findings (and if possible, write me a message so I can update it if needed).\nSQS AWS SQS is a simple 1:1 queue, so it delivers messages from A to B.\n It is a pull service, that means SQS keeps the message and waits the consumer pulls the messsage out.  Retention period is 14 days   Two types defined  Standard FIFO (order guaranteed)    Usages  Great for decoupling and Lambda usage. If we have many queues maybe EventBridge is a better option. Better to use queues on internal microservice communication (between Lambda communication) and EventBridge for microservices external communication. To connect two systems with different throughput capabilities: the queue will make it easier for the receiver. For example connecting a new service with a legacy service. Use to batch jobs  receiving votes -\u0026gt; SQS -\u0026gt; counting votes    Documentation Official documentation\nSNS Fully managed pub/sub messaging service.\n 1 to many, one publish the message, many can subscribe/consume it. Push service - messages are pushed into the consumer, messages cannot stay in the queue. Message filtering: to reduce the amount of message you consume.  Usages  Fan Out pattern: As SNS pushes the message to the consumer, we can put a SQS as consumer, so the consumer can pull the message from the SQS.  SNS -\u0026gt; SQS -\u0026gt; consumer.   Allow parallelization of tasks Different queues for all the services subscribed to the topic Event Driven application: services listening for other services Send emails, text messages, etc.  Documentation Official documentation\nAmazon EventBridge Serverless event buss to connect applications with data from several sources.\n Many to many: several sources can generate messages that can be consumed by several consumers Event bus Not the highest throughput Based on filters (rules): Push service - messages are pushed into the consumer, messages cannot stay in the queue. Events can be aws, 3rd party or custom events  Usages  Decoupling microservices Event Driven applications Get events from other AWS accounts Integrating with many SaaS providers that are able to connect to EventBridge  Documentation Official documentation\nKinesis High throughput for data streams in real time\n Many to many: several sources can generate messages that can be consumed by several consumers Highest throughput Stored and replayed (7 days)  Usages  Ingest a lot of data and real time analytics Gaming generates tons of events so usually they send petabytes of data so game creators can analyze players behavior and usage and improve the game  Documentation Official documentation\nUnofficial documentation There are tons of documents and videos about this subject, I do like this:\n https://www.youtube.com/watch?v=Id2IVs1f7S0   If you found any error or want to help me to improve this article, please comment the pull request.\n","permalink":"https://tomasalmeida.pro/posts/2022/05/my-summary-about-aws-queues/","summary":"I was doubting about writing this post because AWS is evolving really fast and this post will be probably old very fast. So, I am adding the AWS documentation, so, please take your time to check the official documentation to confirm my findings (and if possible, write me a message so I can update it if needed).\nSQS AWS SQS is a simple 1:1 queue, so it delivers messages from A to B.","title":"My summary about AWS queues"},{"content":"Hello, I am Tom√°s. I work as Customer Success Technical Architect (CSTA, read like \u0026ldquo;siesta\u0026rdquo;) at Confluent. As CSTA, I help companies to keep their data in motion using Confluent products and Apache Kafka.\nBefore Confluent, I worked as senior software engineer and team lead at Netcentric being the bridge between the business necessities and the development team. My main tasks included participating in business meetings to guide the client about how to take advantage of Adobe products, supporting the team to work better, and designing and implementing solutions.\nBefore joining Netcentric, I worked at Optare Solutions (Spain) as Senior Consultant in the telecom industry. As a consultant, I discussed the design and implementation of the solution between client and other providers and was the first contact in case of incidents.\nBesides these companies, I also worked as software specialist at Motorola Devices (Brazil and USA), and intern at Capgemini Telecom \u0026amp; Media (France), CenPRA (Brazil) and Unicamp (Brazil).\nIn my spare time, I work on personal projects using and testing new technologies. I\u0026rsquo;m a computer engineer by Unicamp (Brazil), with 1.5 years of exchange in INSA Rennes (France) with a Brazilian scholarship.\nSocial links  My presentations (not too many üò≠) are listed here at presentations section. My main professional life is described in my Linkedin profile. In my Twitter account, I share things that I believe are interesting to other people. My Github profile summarizes my public contributions to opensource (which are few, I need to admit it üòî). If you want to read my blog posts, you can add it to your feedly.   This page is my personal page with no relation with my current company. All texts are offered here are provided with no warranty, please understand what you are doing before you do anything (that is a good advice for life too). ","permalink":"https://tomasalmeida.pro/about/","summary":"Hello, I am Tom√°s. I work as Customer Success Technical Architect (CSTA, read like \u0026ldquo;siesta\u0026rdquo;) at Confluent. As CSTA, I help companies to keep their data in motion using Confluent products and Apache Kafka.\nBefore Confluent, I worked as senior software engineer and team lead at Netcentric being the bridge between the business necessities and the development team. My main tasks included participating in business meetings to guide the client about how to take advantage of Adobe products, supporting the team to work better, and designing and implementing solutions.","title":"About me \u0026 this page"},{"content":"If you are creating a cloud of microservices or are in an environment where you have to generate multiple maven projects or modules, it is very useful to create archetypes to handle these new modules/projects creation.\nWhat is an archetype? A Maven archetype is a templated project. Maven offers several archetypes that allow you to create new maven modules ready to run in few seconds.\nHow to use a generic archetype? Archetype usage is quite simple. If you want to generate an archetype based on the default list, just run:\nmvn archetype:generate And then choose one of the options, provide the details and confirm. The new project will be already created.\nHow to use a custom archetype? In this case, we need to specify the groupId and artifactId of the archetype to be able to use a custom one. As an example, let\u0026rsquo;s see the archetype provided by Adobe for AEM:\nmvn archetype:generate \\ -DarchetypeGroupId=com.adobe.aem \\ -D archetypeArtifactId=aem-project-archetype \\ -D archetypeVersion=27 If you run the command, you will be asked about some properties of your project. Some properties are standard (groupId, version, artifactId and package), but others were specific of this artifact, like appTitle or sdkVersion. These properties will help the archetype to generate a new project for you and in few seconds and knowing nothing about Adobe AEM you have your new project ready to run.\nHow does the archetype work? Internally, an archetype has all the files (pom file, classes, readme, etc\u0026hellip;) with variables that will be replaced during project generation. As an example, you can see these variables in several parts of the pom file below.\n\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;${groupId}\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;${rootArtifactId}\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${version}\u0026lt;/version\u0026gt; \u0026lt;relativePath\u0026gt;../pom.xml\u0026lt;/relativePath\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;artifactId\u0026gt;${artifactId}\u0026lt;/artifactId\u0026gt; \u0026lt;name\u0026gt;${appTitle} - Core\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Core bundle for ${appTitle}\u0026lt;/description\u0026gt; ... Example extracted from Github adobe/aem-project-archetype project\nMaven has a good documentation how to organize and create your archetype from scratch.\nCreating an archetype from a project In most cases, it is hard to maintain an archetype because:\n It is not a project itself, so you need to use your archetype to see if the generated project is working. Templating is good, but it is hard to read and you need to \u0026ldquo;imagine\u0026rdquo; how the code will look like after. We are lazy, and if it is hard to understand, it will be hard to maintain. People will go back to copy-paste projects and replace the text.  A simple way to bypass all these constraints is to create an archetype from an example project. Our example project is a perfect compilable project with all desired configurations we want to keep together in the clones.\nCreate your archetype example project Some characteristics are desired in the archetype example project:\n It should be simple, but complete. Remember to include all dependencies and one example of each element of your project. For example, if the project is a microservice, it makes sense to include a controller, a service, and a repository. Name it in a coherent manner (you will see it in the next steps). I would recommend, for example, having a controller called ArchetypeExampleController which talks to ArchetypeExampleService. In each file, place the same prefix in the variables, so it will be easy to replace them. For example, if you need a variable for your ArchetypeExampleService, a good name is archetypeVariableService. Include the dotfiles as part of this project and a good readme.  archetype:create-from-project The maven goal archetype:create-from-project is the key to generate an archetype from a project.\nAs part of the configuration, you can pass an archetype.properties file as a parameter. This property file should like that:\n# these are standard properties package=com.almeida.tomas groupId=archetype.it artifactId=basic version=1.0.0-SNAPSHOT # here we add our personalized properties defaultClassPrefix=ArchetypeExample defaultVariablePrefix=archetypeVariable As you see above, I only included the changing part of the files or variables and maven will take care of replacing them for me.\nStep-by-step Let\u0026rsquo;s go through all the steps from our archetype example project until our archetype.\n1. Rename all dotfiles It was a known issue that dotfiles are not included in the archetype. So we need to rename them, so they will be also included in the generated archetype (and posterior project).\nmv .gitignore dot.gitignore mv .file dot.file 2. Call the maven goal with the desired parameters. mvn -U clean archetype:create-from-project \\  -Dinteractive=false \\  -DkeepParent=true \\  -DpropertyFile=archetype.properties \\  -DpackageName=com.almeida.tomas \\  -Darchetype.filteredExtensions=java,xml,md In the documentation, you can see more parameters and why and when they are used, but in summary:\n -Dinteractive=false: interactive mode is disabled. -DkeepParent=true: keep the parent. -DpropertyFile=archetype.properties: use our archetype.properties file to check for the variables. -DpackageName=com.almeida.tomas: the package name for java sources that should be included in the archetype. -Darchetype.filteredExtensions=java,xml,md: files with the selected extensions will be checked and the content and the name of the files will be changed by the variables.  3. Clean up the generated archetype metadata In some cases, the generation includes a default value of a property and we want to be sure that all values will be filled by the user.\ncd target/generated-sources/archetype/ sed -i 's/.*defaultValue.*//g' src/main/resources/META-INF/maven/archetype-metadata.xml 4. Install or deploy the archetype If you are running these commands locally install, the archetype in your local repo:\n# be sure to be in the target/generated-sources/archetype folder mvn -B -U clean install My recommendation is to configure a Jenkins job, so every time a change is pushed to the project, Jenkins runs the commands and pushes a new version to your repository.\n# deploy the archetype to repository mvn -B -U clean deploy Use your created archetype The created archetype will have the same artifactId with a -archetype suffix. So based on our example:\nmvn archetype:generate \\  -DarchetypeGroupId=tomas.examples \\  -DarchetypeArtifactId=archetypeProject-archetype \\  -DarchetypeVersion=1.0.0-SNAPSHOT Now, we will be asked to provide a value to the default and personalized variables:\nDefine value for property \u0026#39;groupId\u0026#39;: com.tomas.almeida Define value for property \u0026#39;artifactId\u0026#39;: demo-project Define value for property \u0026#39;version\u0026#39; 1.0-SNAPSHOT: 1.0.0-SNAPSHOT Define value for property \u0026#39;package\u0026#39; com.tomas.almeida: com.tomas.almeida.domain Define value for property \u0026#39;defaultClassPrefix\u0026#39;: Demo Define value for property \u0026#39;defaultVariablePrefix\u0026#39;: demo Confirm the values you have entered are correct:\nConfirm properties configuration: groupId: com.tomas.almeida artifactId: demo-project version: 1.0.0-SNAPSHOT package: com.tomas.almeida.domain defaultClassPrefix: Demo defaultVariablePrefix: demo Y: : Y A new folder will be created and the name is the artifacId name. In our example, demo-project.\ncd demo-project The dotfiles need to be renamed:\nmv dot.gitignore .gitignore mv dot.file .file So, you can now create several clones of your archetype example project in minutes!\n If you found any error or want to help me to improve this article, please comment the pull request.\n","permalink":"https://tomasalmeida.pro/posts/2021/05/creating-an-archetype-from-project/","summary":"If you are creating a cloud of microservices or are in an environment where you have to generate multiple maven projects or modules, it is very useful to create archetypes to handle these new modules/projects creation.\nWhat is an archetype? A Maven archetype is a templated project. Maven offers several archetypes that allow you to create new maven modules ready to run in few seconds.\nHow to use a generic archetype?","title":"Creating an archetype from an existing project"},{"content":"I am starting my journey with kubernetes (k8s) and I want to share the tutorials and blog posts that I read. In that way I can find them easily too üò¨.\nKubernetes basics:  A Beginner‚Äôs Guide to Kubernetes: a very complete guide about the kubernetes basics and how they work internally. An introduction to Kubernetes.: defines kubernetes, pod, deployment, service, ingress, job, kubernetes control plane and when to NOT use k8s.  Kubernetes tools:  Developer Tooling for Kubernetes in 2021: Helm, Kustomize, and Skaffold. Important point here: kustomize is part of kubectl calling kubectl -k, so it will, possibly, become the standard. How To Manage Your Kubernetes Configurations with Kustomize Expose Your App to The Internet Using Ingress Controller kaniko - Build Images In Kubernetes  This list will grow, but if you found any error or want to help me to improve this article, please comment the pull request\n","permalink":"https://tomasalmeida.pro/posts/2021/04/introducing-myself-to-k8s/","summary":"I am starting my journey with kubernetes (k8s) and I want to share the tutorials and blog posts that I read. In that way I can find them easily too üò¨.\nKubernetes basics:  A Beginner‚Äôs Guide to Kubernetes: a very complete guide about the kubernetes basics and how they work internally. An introduction to Kubernetes.: defines kubernetes, pod, deployment, service, ingress, job, kubernetes control plane and when to NOT use k8s.","title":"Introducing myself to Kubernetes"},{"content":"When you are working on Adobe AEM, you usually have to debug some sling or OSGi classes to understand what is happening \u0026ldquo;behind the scene\u0026rdquo;. IntelliJ allows you to download source code and attach it to IntelliJ, but sometimes you cannot do it (you do not have internet access, your vpn to your nexus is down, etc\u0026hellip;).\nThis trick allows you to import the jar bundles into IntelliJ and debug them without downloading the sources!\nFind which AEM bundle has\u0026hellip; The class you want to debug You are debugging your code and then, it does a call to a Sling/OSGi code and you want to debug it. So, go to your server folder and type:\nfind crx-quickstart/launchpad/felix -name \u0026#39;*.jar\u0026#39; -exec grep -Hls \u0026lt;CLASS\u0026gt; {} \\; Replace \u0026lt;CLASS\u0026gt; for the class you want to find. The results will be something like:\nfind crx-quickstart/launchpad/felix -name \u0026#39;*.jar\u0026#39; -exec grep -Hls ImportantClass {} \\; crx-quickstart/launchpad/felix/bundle12/version0.0/bundle.jar crx-quickstart/launchpad/felix/bundle145/version0.0/bundle.jar crx-quickstart/launchpad/felix/bundle200/version0.0/bundle.jar So, now you know the bundles 12, 145 and 200 have the class you want to debug.\nThe message you see in the logs Sometimes, you see a message that you do not know which class sent it. So let\u0026rsquo;s search for the bundle which has this message:\nfind crx-quickstart/launchpad/felix -name \u0026#34;*.jar\u0026#34; -exec zipgrep \u0026#34;\u0026lt;MESSAGE\u0026gt;\u0026#34; \u0026#39;{}\u0026#39; \\; Again, the result will be similar to:\nfind crx-quickstart/launchpad/felix -name \u0026#34;*.jar\u0026#34; -exec zipgrep \u0026#34;found element\u0026#34; \u0026#39;{}\u0026#39; \\; crx-quickstart/launchpad/felix/bundle11/version0.0/bundle.jar So, now you know the bundle 11 has the class you want to debug.\nAdd the bundle to IntelliJ  Go to IntelliJ, open your project. Right click in the main module \u0026gt; Open Module Settings Open Libraries Click in the + button (New Project Library) Add new library (button + in the bottom of the screen) Open the bundle you found in the previous steps. Save everything  Search your class Now you can use shift + shift to open the search window (check the \u0026ldquo;Include non-project items\u0026rdquo;).\nBuilt-in alternatives chrwal recommended via comment that an alternative that can be installed in Apache felix and provide everything to you directly is https://github.com/neva-dev/felix-search-webconsole-plugin. I never used it, but the screenshots are nice :-)\n If you found any error or want to help me to improve this article, please comment the pull request.\n","permalink":"https://tomasalmeida.pro/posts/2021/01/debugging-aem-jar-in-intellij/","summary":"When you are working on Adobe AEM, you usually have to debug some sling or OSGi classes to understand what is happening \u0026ldquo;behind the scene\u0026rdquo;. IntelliJ allows you to download source code and attach it to IntelliJ, but sometimes you cannot do it (you do not have internet access, your vpn to your nexus is down, etc\u0026hellip;).\nThis trick allows you to import the jar bundles into IntelliJ and debug them without downloading the sources!","title":"Debugging AEM: java code in IntelliJ"},{"content":"Sometimes we need to contact remote servers and send him some data. It is hard to test the whole feature if the remote server does not offer you a sandbox environment.\nAn easy way to do it is creating a mock http server and for me, the easiest way of doing it is with node.js\nInstall node.js Node.js offers a great page for downloading it, I prefer to use it the package manager options. For macOS, I use brew:\nbrew install node Create your dummy server Create a server.js file and write:\nvar http = require(\u0026#39;http\u0026#39;); // get port from arguments or use 8000 by default var port = process.argv[2] || 8000 var server = http.createServer(function (request, response) { const { headers, method, url } = request; console.log(\u0026#39;--- HEADERS ---\u0026#39;); console.log(headers); console.log(\u0026#39;--------------\u0026#39;); console.log(\u0026#39;Method: \u0026#39; + method); console.log(\u0026#39;URL: \u0026#39; + url); console.log(\u0026#39;--------------\u0026#39;); // print the data of the request  request.on(\u0026#39;data\u0026#39;, (chunk) =\u0026gt; { console.log(\u0026#39;---- BODY ----\u0026#39;); console.log(chunk.toString()); console.log(\u0026#39;--------------\u0026#39;); }); // response status and content-type  response.statusCode = 200; response.setHeader(\u0026#39;Content-Type\u0026#39;, \u0026#39;text/plain; charset=utf-8\u0026#39;); response.setHeader(\u0026#39;X-Custom-Header\u0026#39;, \u0026#39;Yes, we have\u0026#39;); // content to answer  response.write(\u0026#39;Thanks \u0026#39;); response.end(\u0026#39;for the message.\\n\u0026#39;); }); server.listen(port); console.log(\u0026#39;Server running on port \u0026#39; + port); After it, just run it:\nnode server.js 9999 Some explanations of this small script:\n The server is listening to any request (POST, GET, etc..) This server prints the headers, the used method and the url and in other point the body. The answer is a HTTP 200 (OK), 2 headers and some content.  You can improve and put logic in the answer.\nIf you found any error or want to help me to improve this article, please comment the pull request\nReference:  https://nodejs.org/es/docs/guides/anatomy-of-an-http-transaction  ","permalink":"https://tomasalmeida.pro/posts/2021/01/mock-server-nodejs/","summary":"Sometimes we need to contact remote servers and send him some data. It is hard to test the whole feature if the remote server does not offer you a sandbox environment.\nAn easy way to do it is creating a mock http server and for me, the easiest way of doing it is with node.js\nInstall node.js Node.js offers a great page for downloading it, I prefer to use it the package manager options.","title":"Mocking a http post server with node.js"},{"content":"Since version 3.4.0, Mockito allows us to mock static methods, so you do not need to add powermock as dependency for most of your necessities.\nI will not discuss why we should avoid static methods or helper class with static methods, as several articles do it quite well (1, 2, 3, etc..), we need to deal with static methods in the real world of development and mockito helps us to create unit tests when these static methods are involved.\nThe code Static helper / util class We have a static Helper class with two methods (one with arguments and other without).\nFor our example, we added a very simple code, but usually static methods have code which are harder to predict and not always junit friendly.\npublic class GreetingsUtil { public static String sayFormalGoodbye() { return \u0026#34;Farewell\u0026#34;; } public static String getFormalHello(final String name) { return \u0026#34;Hello \u0026#34; + name; } } Full code available in the example repo in github\nOur class And now, the code which uses the helper class\npublic class PolitePerson { public String startConversationWith(final String name) { return GreetingsUtil.getFormalHello(name) + \u0026#34;!\u0026#34;; } public String finishConversation() { return GreetingsUtil.sayFormalGoodbye() + \u0026#34;!\u0026#34;; } } Full code available in the example repo in github\nAdd dependency to mockito inline Usually for Junit5 and Mockito, we add the mockito-core dependency, but in this case we need to use mockito-inline to enable static mocking.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mockito\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mockito-inline\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.6.28\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; The complete version of the pom.xml file can be found in the examples repo in github.\nAs you can see, I use version 3.6.28, which was the latest version available at this time. Check https://mvnrepository.com/artifact/org.mockito/mockito-inline to verify if a newer one is available when you read this article.\nUnit test Our unit tests for need to test both methods.\nCreating a test mocking a static method with no arguments @Test void shouldFinishConversation() { //given the object we want to test  PolitePerson politePerson = new PolitePerson(); // we use a try-with-resources block  try (MockedStatic\u0026lt;GreetingsUtil\u0026gt; greetingsUtilMockedStatic = mockStatic(GreetingsUtil.class)) { //given part: pay attention that inside the when we use a method reference  greetingsUtilMockedStatic.when(GreetingsUtil::sayFormalGoodbye).thenReturn(\u0026#34;Bye\u0026#34;); //when part: we call the part of the real code which uses the static method  final String goodbyeMessage = politePerson.finishConversation(); //then part: we verify our mocked method is called and the class does its part (in this case, adding the \u0026#34;!\u0026#34;)  assertEquals(\u0026#34;Bye!\u0026#34;, goodbyeMessage); } } Full code available in the example repo in github\nSome notes about the code above:\n We statically imported the method mockStatic (and others). The try-with-resources part is a bit verbose and forces us to create most of the code inside the try block. The mocked method uses a method reference, in the next example, we show how to change behavior based in the argument.  Creating a test mocking a static method with arguments @Test void shouldStartConversation() { //given the object we want to test  PolitePerson politePerson = new PolitePerson(); // we use a try-with-resources block  try (MockedStatic\u0026lt;GreetingsUtil\u0026gt; greetingsUtilMockedStatic = mockStatic(GreetingsUtil.class)) { //given part: pay attention that inside the when we verify the given argument is equals to \u0026#34;John\u0026#34;  greetingsUtilMockedStatic.when(() -\u0026gt; GreetingsUtil.getFormalHello(eq(\u0026#34;John\u0026#34;))).thenReturn(\u0026#34;Hello John\u0026#34;); //when part: we call the part of the real code which uses the static method  final String helloMessage = politePerson.startConversationWith(\u0026#34;John\u0026#34;); //then part: we verify our mocked method is called and the class does its part (in this case, adding the \u0026#34;!\u0026#34;)  assertEquals(\u0026#34;Hello John!\u0026#34;, helloMessage); } } Full code available in the example repo in github\nSome notes about the code above:\n We, again, statically imported the method mockStatic (and others). We use a lambda expression inside the when We are testing if the given argument to our static mocked test is equals to \u0026ldquo;John\u0026rdquo;  Bonus: Mocking constructors Some methods create new objects inside it and for tests, we could want to control how these internal objects behave. For that, in Mockito 3.5.0+ you can also mock constructors.\n@Test void shouldForceAnInformalPerson() { // we use a try-with-resources block  try (MockedConstruction politePersonConstructionMocked = mockConstruction(PolitePerson.class)) { // given part: in our example, we create the new object, but this part could be inside a method call  PolitePerson mockedPolitePerson = new PolitePerson(); // given part: when the mock PolitePerson finish conversation is called, an informal goodbye is sent  when(mockedPolitePerson.finishConversation()).thenReturn(\u0026#34;Take it easy\u0026#34;); // when part: call the method  final String informalGoodbyeMessage = mockedPolitePerson.finishConversation(); // then part: we verify our fake message is returned and we verify the mock is called only once  assertEquals(\u0026#34;Take it easy\u0026#34;, informalGoodbyeMessage); verify(mockedPolitePerson, times(1)).finishConversation(); } } Full code available in the example repo in github\nSome notes about the code above:\n Given part: we also created the object here, but in the real world, the object creation is part of the \u0026ldquo;then\u0026rdquo; part. We use verify method from mockito to test the method is called only once. The times(1) is not needed for the value 1, but I prefer to put it explicitly to make the code more precise.  If you found any error or want to help me to improve this article, please comment the pull request\nReferences:  Mockito documentation static methods Mockito documentation constructors  ","permalink":"https://tomasalmeida.pro/posts/2020/12/mocking-static-methods-mockito/","summary":"Since version 3.4.0, Mockito allows us to mock static methods, so you do not need to add powermock as dependency for most of your necessities.\nI will not discuss why we should avoid static methods or helper class with static methods, as several articles do it quite well (1, 2, 3, etc..), we need to deal with static methods in the real world of development and mockito helps us to create unit tests when these static methods are involved.","title":"Mocking static methods (and constructors) using Mockito 3.5.0+"},{"content":"2021 Netcentric Summit 2021 Blog post: Kustomize \u0026amp; Crossplane: maximizing the utility of Kubernetes\n2019 Netcentric Summit 2019 \nBlog post: JUnit 5: leveraging new features for testing\n2017 VigoJUG 2017: Make Java Great Again! \n","permalink":"https://tomasalmeida.pro/presentations/","summary":"2021 Netcentric Summit 2021 Blog post: Kustomize \u0026amp; Crossplane: maximizing the utility of Kubernetes\n2019 Netcentric Summit 2019 \nBlog post: JUnit 5: leveraging new features for testing\n2017 VigoJUG 2017: Make Java Great Again!","title":"Presentations"},{"content":"One thing that I miss from Windows is the Windows Explorer (yes, I like it). Finder is not as good as Windows Explorer\u0026hellip;\nPermanent solution I like to see all my files, so to do it on MacOS , open a terminal and type\ndefaults write com.apple.Finder AppleShowAllFiles true killall Finder Revert changes This setting is persisted even after a restart, so if you want to go back to your previous status (hidden files are hidden), open a terminal again and type:\ndefaults write com.apple.Finder AppleShowAllFiles false killall Finder Finder shortcode  Open Finder Hit Cmd + Shift + Dot key (.)  Revert Changes Repeat the same shortcode\n Open Finder Hit Cmd + Shift + Dot key (.)  ","permalink":"https://tomasalmeida.pro/posts/2020/12/showing-hidden-files-folder-macos/","summary":"One thing that I miss from Windows is the Windows Explorer (yes, I like it). Finder is not as good as Windows Explorer\u0026hellip;\nPermanent solution I like to see all my files, so to do it on MacOS , open a terminal and type\ndefaults write com.apple.Finder AppleShowAllFiles true killall Finder Revert changes This setting is persisted even after a restart, so if you want to go back to your previous status (hidden files are hidden), open a terminal again and type:","title":"Showing hidden files and folder on Finder (MacOS)"},{"content":"How I created this blog As many github blogs born and die, my first post is how I created this blog using hugo as static page generator, travis-ci as CI/CD and github pages as page hosting.\nAs I do not want to have 2 separate repositories as proposed by Claudio Jolowicz in his tutorial, I will use the possibility to host the source under main and the page itself under another branch. Github proposes as a standard to use gh-pagesfor the content itself, so I will follow it.\nGithub configuration Create your github repository Under your github account, create a new repository using the format \u0026lt;USERNAME\u0026gt;.github.io (in my case it is tomasalmeida.github.io). Pay attention the repository is public, I tried it as private and it did not work, so if it works for you, even better :-)\nSet gh-pages as content branch Now, let\u0026rsquo;s create our needed branch gh-pages and set it as the default content container. To do it, we need to start the repo locally and push the changes. I made a dummy commit, but you can directly create your hugo content if you prefer\u0026hellip;\nCreate the repo locally We will create the repository locally and create some content\nmkdir tomasalmeida.github.io cd $_ echo \u0026#34;# Visit https://tomasalmeida.github.io\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;Here a new blog is born\u0026#34; Create the needed branches git branch -M main # I follow github naming and I use main instead of master git branch gh-pages # the content branch Link local and remote repository and push everything git remote add origin git@github.com:tomasalmeida/tomasalmeida.github.io.git git push origin \u0026#39;*:*\u0026#39; git push origin --all # just a double check Change the github content branch Go to your github repository again and enter in settings. There scroll down to GitHub Pages section and change the branch from main to gh-pages. Save it.\n A more detailed explanation about how to change your github page branch can be found in github docs:\nConfiguring a publishing source for your GitHub Pages site\n Optional: Define main as a protected branch Let\u0026rsquo;s avoid unexpected commits on main branch. So:\n Go to your repository and then Settings. Url is https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;USERNAME\u0026gt;.github.io/settings Choose Branches option Add rule  For \u0026ldquo;Branch name pattern\u0026rdquo;, put main Check \u0026ldquo;Require pull request reviews before merging\u0026rdquo; Check \u0026ldquo;Require status checks to pass before merging\u0026rdquo;  Check \u0026ldquo;Require branches to be up to date before merging\u0026rdquo; Check \u0026quot; Page Build\u0026quot; Check \u0026ldquo;github/pages\u0026rdquo;   \u0026ldquo;Create\u0026rdquo; and then \u0026ldquo;Save changes\u0026rdquo;.     Again, a more detailled explanation is available on github docs:\nConfiguring protected branches\n Travis configuration Set up your travis-ci account   Go to Travis-ci.com and Sign up with GitHub. Accept the Authorization of Travis CI. You‚Äôll be redirected to GitHub. For any doubts on the Travis CI GitHub Authorized OAuth App access rights message, please read more details below Click on your profile picture in the top right of your Travis Dashboard, click Settings and then the green Activate button, and select the repositories you want to use with Travis CI.  Extracted from Travis CI Tutorial\n In our case, we want to be sure our `.github.io is activated.\nGithub token I believe one of the keys of my success is the steps described by CreatureSurvive in his/her very concise and useful post Hugo on GitHub Pages using Travis-CI for deployment. All needed information is there, but I will rephrase and detail some steps below.\nGithub tokens are a way to give permissions to other agents to access/act in your repositories without giving them your password.\nCreate a new github token   To generate a new token, go to your Settings (click in your avatar on the top right and then Settings) -\u0026gt; \u0026ldquo;Developer settings\u0026rdquo; option -\u0026gt; \u0026ldquo;Personal access tokens\u0026rdquo; option -\u0026gt; \u0026ldquo;Generate new token\u0026rdquo; button.\n  Choose a name (I recommend something meaningful like travis-ci-token) and select repo checkbox (travis will commit changes for you).\n  Generate the token (button in the bottom) and store the value.  Set the github token in travis  Go to https://travis-ci.com/github/\u0026lt;USERNAME\u0026gt;/\u0026lt;USERNAME\u0026gt;.github.io and in \u0026ldquo;more options\u0026rdquo; choose Settings. Add a new environment variable called GITHUB_TOKEN and insert the token value.  Ensure Display value in build log is unchecked. Optionally: you can restrict the access to branch main. Save it.    Hugo configuration Hugo offers an excellent quick start guide, but for the purpose to keep everything in one tutorial, I will detail the steps here.\nInstall Hugo On macOS, I recommend using Homebrew. For windows or linux, please take a look on Install Hugo doc.\nbrew install hugo Create the blog As we already set up our repository locally, we will now set hugo there\ncd tomasalmeida.github.io hugo new site --force ./ # --force is needed as the folder is not empty Define a theme In https://themes.gohugo.io, you have several options to choose. I will use the same as in the Hugo tutorial: Ananke Gohugo Theme\ngit submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke git add themes git commit -m \u0026#34;Adding a submodule for the theme ananke\u0026#34; Define a basic configuration for the site Let\u0026rsquo;s add the basic configuration for the blog, as the url, the title and the theme we downloaded in the previous step.\nFor that open the config.toml and edit to to something similar to:\nbaseURL = \u0026#34;https://tomasalmeida.github.io/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;Tom√°s Dias Almeida notes\u0026#34; theme = \u0026#34;ananke\u0026#34; Commit the changes:\ngit add config.toml git commit -m \u0026#34;Adding blog basic configuration\u0026#34; Create Travis configuration Last and easiest part, we will connect all together. Under the root of your project create the .travis.yml file with this content:\n--- install: - curl -LO https://github.com/gohugoio/hugo/releases/download/v0.79.1/hugo_0.79.1_Linux-64bit.deb - sudo dpkg -i hugo_0.79.1_Linux-64bit.deb script: - hugo deploy: provider: pages skip_cleanup: true local_dir: public github_token: $GITHUB_TOKEN # already Set in travis-ci.org dashboard on: branch: main Thanks again for CreatureSurvive and the useful post Hugo on GitHub Pages using Travis-CI for deployment.\nCommit travis configuration file:\ngit add .travis.yml git commit -m \u0026#34;Travis ci configuration\u0026#34; Create your first post Well, I am creating this post right now. As you can see I like to have the date in the name for organization. I believe it goes against SEO, but it is easier to maintain control over the posts.\nhugo new posts/2020/12/creating-blog-using-hugo-travis-github.md As you can see, a new file is created with something like this:\n--- title: \u0026#34;Creating Blog Using Hugo Travis Github\u0026#34; date: 2020-12-24T12:58:00+01:00 draft: true --- Brief explanation:\n title: it is an auto generated title for your post. date: when the file was created draft: true means do not publish it.  If you want to see the changes directly in http://localhost:1313 if you can run\nhugo server -D Once your finish your post, it is time to commit everything (do not forget to change the draft option to false)\nCommit and push the changes:\ngit add . git commit -m \u0026#34;My first blog post about creating a blog and its first blog post\u0026#34; git push --set-upstream origin main Travis build job When you push the changes, travis will launch a new build. You can review it at https://travis-ci.com/github/\u0026lt;USERNAME\u0026gt;/\u0026lt;USERNAME\u0026gt;.github.io\nOnce the build is done your website is visible after some seconds!\nReferences:  Hosting a Hugo blog on GitHub Pages with Travis CI Hugo on GitHub Pages using Travis-CI for deployment Hugo on GitHub Pages with Travis CI Hugo: Quick Start  ","permalink":"https://tomasalmeida.pro/posts/2020/12/creating-blog-using-hugo-travis-github/","summary":"How I created this blog As many github blogs born and die, my first post is how I created this blog using hugo as static page generator, travis-ci as CI/CD and github pages as page hosting.\nAs I do not want to have 2 separate repositories as proposed by Claudio Jolowicz in his tutorial, I will use the possibility to host the source under main and the page itself under another branch.","title":"Creating a blog using Hugo, travis-ci and Github pages"}]